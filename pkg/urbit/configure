#!/usr/bin/env bash

set -euo pipefail

URBIT_VERSION="$(cat ./version)"

deps="                                                                \
  curl gmp sigsegv argon2 ed25519 ent h2o scrypt uv murmur3 secp256k1 \
  softfloat3 aes_siv ssl crypto z lmdb ge-additions pthread           \
"

headers="             \
  ivory.h ca-bundle.h \
"

echo '#pragma once' >include/config.h

defmacro () {
  echo "#define $1 $2" >>include/config.h
}

xxd () {
  cch=0
  echo "unsigned char $2[] = {"
  while IFS='' read line
  do
    for i in $line
    do
      echo -n " 0x$i,"
      cch=$((cch+1))
    done
    echo
  done < <(od -An -v -tx1 $1)
  echo "};"
  echo "unsigned int $2_len = $cch;"
}

defmacro URBIT_VERSION "\"$URBIT_VERSION\""

opt_debug=

while test $# != 0
do
  case $1 in
  --enable-debug)
    opt_debug=1
    ;;
  --disable-debug)
    opt_debug=0
    ;;
  *)
    echo "unrecognized option: $1"
    ;;
  esac
  shift
done

[ -n "${MEMORY_DEBUG-}" ]     && defmacro U3_MEMORY_DEBUG 1
[ -n "${MEMORY_LOG-}" ]       && defmacro U3_MEMORY_LOG 1
[ -n "${CPU_DEBUG-}" ]        && defmacro U3_CPU_DEBUG 1
[ -n "${EVENT_TIME_DEBUG-}" ] && defmacro U3_EVENT_TIME_DEBUG 1

if [ -n "${HOST-}" ]
then os=$(sed 's$^[^-]*-\([^-]*\)-.*$\1$' <<< "$HOST")
     cpu=$(sed 's$-.*$$' <<< ${HOST})
else os=$(uname -s)
     cpu=$(uname -m)
fi

case $(tr A-Z a-z <<< $cpu) in
  unknown)
     defmacro U3_OS_ENDIAN_little 1
     ;;
  i386)
     defmacro U3_OS_ENDIAN_little 1
     ;;
  i686)
     defmacro U3_OS_ENDIAN_little 1
     ;;
  x86_64)
     defmacro U3_OS_ENDIAN_little 1
     ;;
  aarch64)
     defmacro U3_OS_ENDIAN_little 1
     defmacro U3_CPU_aarch64 1
     ;;
  *)
     echo "Unknown or unsupported CPU: '$cpu'" >&2
     exit 1
     ;;
esac

# TODO Determine if the target cpu is little or big endian.
case $(tr A-Z a-z <<< $os) in
  *mingw*)
     # set up dependencies and create cdirs and ldirs arrays
     . compat/mingw/poor-mans-nix-shell.sh

     # support running off a tarball that doesn't contain binary pills
     (( $(stat -c %s ../../bin/ivory.pill) > 512 )) || curl -L https://github.com/urbit/urbit/raw/urbit-v$URBIT_VERSION/bin/ivory.pill > ../../bin/ivory.pill

     [ -e include/ca-bundle.h ] || xxd /etc/pki/ca-trust/extracted/openssl/ca-bundle.trust.crt include_ca_bundle_crt >include/ca-bundle.h
     [ -e include/ivory.h     ] || xxd ../../bin/ivory.pill u3_Ivory_pill >include/ivory.h

     defmacro U3_OS_mingw 1

     if ((opt_debug))
     then
       CFLAGS="${CFLAGS-} -O0 -g"
     else
       CFLAGS="${CFLAGS-} -O3 -g"
     fi

     deps="${deps/sigsegv}"
     compat="${compat-} mingw"
     CFLAGS="${CFLAGS-} ${cdirs[@]}"
     LDFLAGS="${LDFLAGS-} ${ldirs[@]} -static"
     PKG_CONFIG=">/dev/null echo"
     ;;
  *linux*)
     defmacro U3_OS_linux 1
     defmacro U3_OS_PROF 1
     ;;
  *darwin*)
     defmacro U3_OS_osx 1
     defmacro U3_OS_PROF 1
     ;;
  *apple*)
     defmacro U3_OS_osx 1
     defmacro U3_OS_PROF 1
     ;;
  *freebsd*)
     defmacro U3_OS_bsd 1
     osdeps="kvm"
     ;;
  *openbsd*)
     defmacro U3_OS_bsd 1
     ;;
  *)
     echo "Unknown or unsupported OS: '$os'" >&2
     exit 1
     ;;
esac

for dep in ${osdeps-} $deps
do LDFLAGS="${LDFLAGS-} -l$dep"
   ${PKG_CONFIG-pkg-config} --cflags --libs $dep 2>/dev/null || true
done

for header in $headers
do LDFLAGS="${LDFLAGS-} -I$header"
done

compat="${compat-posix}"
for citem in $compat
do
   CFLAGS="${CFLAGS-} -Icompat/$citem"
done

cat >config.mk <<EOF
CFLAGS  := ${CFLAGS-} -funsigned-char -ffast-math -fcommon -std=gnu99
LDFLAGS := $LDFLAGS
CC      := ${CC-cc}
compat  := $compat
EOF

echo == config.mk == >&2
cat config.mk >&2

echo == include/config.h == >&2
cat include/config.h >&2
